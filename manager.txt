//text info.md
# productManager_angular
## Project Product Management
### Objectives:
* Create a full CRUD app with Angular, Express, Node, and MongoDB
* Use nested routing
* Include backend validations
* Build a product manager app in which a user may view a home page, the product list page, product creation page (with validations), and product edit page (with validations). Reference the wireframe below for details:

* REMINDER: When building applications which include forms and http requests, be sure to import the 'FormsModule' and 'HttpClientModule' in your AppModule file.
![](ppm3.png)


 1. Create a full CRUD application
 2. Include nested routing
 3. Include backend validations

 //------------------------------------------------server.js--------------------------------------------------------------
 -------------------------------------------------------------------------------------------------------------------------
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var path = require('path')
app.use(bodyParser.json());
app.use(express.static(__dirname + '/publics/dist/publics'));

 //app.all("*", (req, res, next) => {
//     res.sendFile(path.resolve("./publics/dist/publics/index.html"))
// });

app.listen(8000, function () {
    console.log('Listening on port 8000 manager');
});

require('./server/config/mongoose');
require('./server/config/routes')(app);
done
//===================================================controllers.js====================================================================
======================================================================================================================================

require('../models/models');
require('../config/mongoose');

var mongoose = require('mongoose');

var Item = mongoose.model('Item');
module.exports = {
    index: (req, res) => {
        Item.find({}, (err, data) => {
            if(err) {
                res.json({message: "Error", error: err});
            } else {
                console.log(data);
                res.json({message: "Success", data: data});
            }
        })
    },
    create: (req, res) => {
        Item.create(req.body, (err, data) => {
            if(err) {
                res.json({message: "Error", error: err});
            } else {
                res.json({message: "Success", data: data});
            }
        })
    },
    show: (req, res) => {
        Item.findOne({_id: req.params.id}, (err, data) => {
            if(err) {
                res.json({message: "Error", error: err});
            } else {
                console.log(data);
                res.json({message: "Success", data: data});
            }
        })
    },
    update: (req, res) => {
        Item.update({_id: req.params.id}, req.body, (err, data) => {
            if(err){
                res.json({message: "Error", error: err});
            } else {
                res.json({message: "Success", data: data});
            }
        })
    },
    destroy: (req, res) => {
        Item.remove({_id: req.params.id}, (err, data) => {
            if(err) {
                res.json({message: "Error", error: err});
            } else {
                console.log("DELETED!", data);
                res.json({message: "Success", data: data});
            }
        })
    }
}
done
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++models.js++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
var mongoose = require('mongoose');
var ItemSchema = new mongoose.Schema({
    title: {
        type: String,
        required: [true, "A product must have a title."],
        minlength: [3, "Need more info!"],
        maxlength: [20, "WHOAH! TOO LONG DID NOT READ!"]
    },
    price: {
        type: Number,
        required: [true, "It can't be free!!!"],
    },
    url: {
        type: String,
        required: [true, "What does it look like!?!?"],
        trim: true
    }
}, {timestamps: true})

module.exports = mongoose.model('Item', ItemSchema);
done
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++mongoose.js++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

var mongoose = require('mongoose');
var path = require('path');
var fs = require('fs')

mongoose.connect('mongodb://localhost/productManager',
{}, (err) => {
    if(err){
        console.log("ERROR", err);
    } else {
        console.log("CONNECTED!");
    }
});

var models_path = path.join(__dirname, './../models');

//iterates through the models folder and searches for all the model js files
fs.readdirSync(models_path).forEach((file) =>{
    if(file.indexOf('.js')>=0){
        require(models_path + '/' + file);
    }
});
done
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++routes.js++++++++++++++++++++++++++++++++++++++++++++++++++++

var products = require('../controllers/controllers');
module.exports = (app) =>{
    app.get('/allProducts', (req, res) =>{
        products.index(req, res)
    })
    app.get('/product/:id', (req, res) => {
        products.show(req, res)
    })
    app.post('/create', (req, res) => {
        products.create(req, res)
    })
    app.put('/update/product/:id', (req, res) => {
        products.update(req, res)
    })
    app.delete('/destroy/product/:id', (req, res) => {
        products.destroy(req, res)
    })
}
done
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++http.service.ts++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class HttpService {

  constructor(private _http: HttpClient) { }
  getProducts(){
    return this._http.get('/allProducts');
  }
  getOneProduct(id){
    return this._http.get(`/product/${id}`);
  }
  createProduct(newProduct){
    return this._http.post('/create', newProduct);
  }
  updateProduct(updateProduct){
    return this._http.put(`/update/product/${updateProduct._id}`, updateProduct);
  }
  destroyProduct(id){
    return this._http.delete(`/destroy/product/${id}`);
  }
}
done
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++app.module.ts+++++++++++++++++++++++++++++++++++++++++++++++++

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { HttpService } from './http.service';
import { FormsModule } from '@angular/forms';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LandingComponent } from './landing/landing.component';
import { NewComponent } from './new/new.component';
import { EditComponent } from './edit/edit.component';
import { ProductsComponent } from './products/products.component';
import { PageNotFoundComponent } from './page-not-found/page-not-found.component';

@NgModule({
  declarations: [
    AppComponent,
    LandingComponent,
    NewComponent,
    EditComponent,
    ProductsComponent,
    PageNotFoundComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [HttpService],
  bootstrap: [AppComponent]
})
export class AppModule { }
done
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++app.component.ts++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'public';
}
done
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++app.component.html++++++++++++++++++++++++++++++++++++++++++++++++++++
<!--The content below is only a placeholder and can be replaced.-->
<div style="text-align:center">
  <h1>PPM - Project Product Management</h1>
  <header>
    <h2>
      <a [routerLink]="['/']">Home</a> | 
      <a [routerLink]="['/products']">Products List</a> |
      <a [routerLink]="[ '/products/new']">Product Creation</a>
    </h2>
  </header>
</div>

<router-outlet></router-outlet>
done
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++app-routing.module.ts+++++++++++++++++++++++++++++++++++++++++
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { LandingComponent } from './landing/landing.component';
import { NewComponent } from './new/new.component';
import { EditComponent } from './edit/edit.component';
import { ProductsComponent } from './products/products.component';
import { PageNotFoundComponent } from './page-not-found/page-not-found.component';
const routes: Routes = [
  {path: '', component: LandingComponent},
  {path: 'products', component: ProductsComponent},
  {path: 'products/new', component: NewComponent},
  {path: 'products/edit/:id', component: EditComponent},
  {path: '**', component: PageNotFoundComponent}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
done
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++products.component.ts++++++++++++++++++++++++++++++++++++++++++++

import { Component, OnInit } from '@angular/core';
import { HttpService } from '../http.service';
@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {
  allProducts;
  constructor(private _httpService: HttpService) { }

  ngOnInit() {
    this.getProducts();
  }
  getProducts(){
    let observable = this._httpService.getProducts();
    observable.subscribe(data => {
      this.allProducts = data['data'];
    })
  }
  destroyProduct(id){
    let observable = this._httpService.destroyProduct(id);
    observable.subscribe(data => {
      console.log(data);
    })
    this.getProducts();
  }
}
done
++++++++++++++++++++++++++++++++++++++++++++++++++++++products.component.html++++++++++++++++++++++++++++++++++++++++++++++++
<main style="text-align:center">
  <h3>Here Are Our Products</h3>
  <div *ngFor="let product of allProducts">
    <label for="title">Product Name: {{ product.title }}</label>
    <br>
    <img src="{{ product.url }}" alt="{{ product.title }}">
    <br>
    <label for="price">Product Price: {{ product.price }}</label>
    <br>
    <a [routerLink]="[ '/products/edit', product._id ]">EDIT</a>
    <br>
    <br>
    <button (click)="destroyProduct(product._id)">DELETE</button>
  </div>



  <div *ngFor="let err of errors">
    <p style="color: red;">{{ err.title.message }}</p>
    <!-- <p style="color: red;" >{{ err.price.message }}</p> -->
    <p style="color: red;">{{ err.url.message }}</p>

  </div>

  <router-outlet></router-outlet>

</main>
done
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++products.component.spec.ts++++++++++++++++++++++++++++++++++++++++++
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { ProductsComponent } from './products.component';

describe('ProductsComponent', () => {
  let component: ProductsComponent;
  let fixture: ComponentFixture<ProductsComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ ProductsComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ProductsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
not changed
____________________________________________page-not-found.component.ts______________________________________

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-page-not-found',
  templateUrl: './page-not-found.component.html',
  styleUrls: ['./page-not-found.component.css']
})
export class PageNotFoundComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}
not changed
------------------------------------------------------page-not-found.component.spec.ts--------------------------------

import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { PageNotFoundComponent } from './page-not-found.component';

describe('PageNotFoundComponent', () => {
  let component: PageNotFoundComponent;
  let fixture: ComponentFixture<PageNotFoundComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ PageNotFoundComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(PageNotFoundComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
not changes
----------------------------------------------------------page-not-found.html------------------------------------
<p>
  page-not-found works!
</p>
not changed
=======================================================new.component.ts===========================================
import { Component, OnInit } from '@angular/core';
import { HttpService } from '../http.service';
import { ActivatedRoute, Params, Router } from '@angular/router';

@Component({
  selector: 'app-new',
  templateUrl: './new.component.html',
  styleUrls: ['./new.component.css']
})
export class NewComponent implements OnInit {
  newProduct;
  errors = [];
  constructor(
    private _httpSerice: HttpService,
    private _route: ActivatedRoute,
    private _router: Router
    ) { }

  ngOnInit() {
    this.newProduct = {
      title: "",
      price: 0.00,
      url: ""
    }
  }
  createProduct(){
    this.errors = [];
    let observable = this._httpSerice.createProduct(this.newProduct);
    observable.subscribe(data =>{
      if(data['message'] === "Error"){
        console.log(data);
        this.errors.push(data['error']['errors']);
      } else {
        console.log(data);
        this._router.navigate(['/products']);
      }
    })
  }
}
done
========================================================new.component.spec===================================
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { NewComponent } from './new.component';

describe('NewComponent', () => {
  let component: NewComponent;
  let fixture: ComponentFixture<NewComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ NewComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(NewComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
not changed
=========================================================new.component.html===========================================
<main style="text-align:center">
  <h3>New Product Page</h3>
  <form (submit)="createProduct()">
    <label for="title">Product Name: <input type="text" name="newProduct.title" [(ngModel)]="newProduct.title"></label><br>
    <label for="price">Product Price: <input type="number" name="newProduct.price" [(ngModel)]="newProduct.price"></label><br>
    <label for="url">Product URL: <input type="text" name="newProduct.url" [(ngModel)]="newProduct.url"></label><br>
    <button class="btn-outline-primary" type="submit">CREATE PRODUCT</button>
    <button type="submit" [routerLink]="[ '/products' ]">CANCEL</button>
  </form>
  <div *ngFor="let err of errors">
    <p style="color: red;" >{{ err.title.message }}</p>
    <!-- <p style="color: red;" >{{ err.price.message }}</p> -->
    <p style="color: red;" >{{ err.url.message }}</p>

  </div>

  <router-outlet></router-outlet>
  
</main>
done
====================================================landing.component.ts===========================================

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-landing',
  templateUrl: './landing.component.html',
  styleUrls: ['./landing.component.css']
})
export class LandingComponent implements OnInit {

  constructor() { }

  ngOnInit() {
  }

}
not changed
=================================================landing.spec=======================================================
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { LandingComponent } from './landing.component';

describe('LandingComponent', () => {
  let component: LandingComponent;
  let fixture: ComponentFixture<LandingComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ LandingComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(LandingComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
=============================================================landing.html==========================================
<main style="text-align:center">
  <h3>Home Page</h3>
  <p>
    This is our landing page. Welcome to Product Manager. Please click the links to go where you need to go.
  </p>
</main>
done
=========================================================edit.component.ts======================================
import { Component, OnInit } from '@angular/core';
import { HttpService } from '../http.service';
import { ActivatedRoute, Params, Router } from '@angular/router';
@Component({
  selector: 'app-edit',
  templateUrl: './edit.component.html',
  styleUrls: ['./edit.component.css']
})
export class EditComponent implements OnInit {
  editProduct;
  editId;
  constructor(
    private _httpService: HttpService,
    private _route: ActivatedRoute,
    private _router: Router
  ) { }

  ngOnInit() {
    this._route.params.subscribe((params: Params) => {
      this.editId = params['id'];
    })
    this.getProduct(this.editId);
  }
  getProduct(id) {
    let observable = this._httpService.getOneProduct(id);
    observable.subscribe(data => {
      this.editProduct = data['data'];
    })
  }
  updateProduct() {
    let observable = this._httpService.updateProduct(this.editProduct);
    observable.subscribe(data => {
      if (data['message'] === "Success") {
        this._router.navigate(['/products']);
        // need to display errors
      }
    })
  }
}
done
======================================================edit.spec===================================================
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { EditComponent } from './edit.component';

describe('EditComponent', () => {
  let component: EditComponent;
  let fixture: ComponentFixture<EditComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ EditComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(EditComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
==============================================edit.component.html=================================================
<main style="text-align:center">
  <h3>Edit Product Page</h3>
  <form (submit)="updateProduct()">
    <label for="title">Product Name: <input type="text" name="editProduct.title"
        [(ngModel)]="editProduct.title"></label><br>
    <label for="price">Product Price: <input type="number" name="editProduct.price"
        [(ngModel)]="editProduct.price"></label><br>
    <label for="url">Product URL: <input type="text" name="editProduct.url" [(ngModel)]="editProduct.url"></label><br>
    <button class="btn-outline-primary" type="submit">EDIT PRODUCT</button>
    <button type="submit" [routerLink]="[ '/products' ]">CANCEL</button>
  </form>
  <div *ngFor="let err of errors">
    <p style="color: red;">{{ err.title.message }}</p>
    <!-- <p style="color: red;" >{{ err.price.message }}</p> -->
    <p style="color: red;">{{ err.url.message }}</p>
  </div>
  <router-outlet></router-outlet>
</main>
done